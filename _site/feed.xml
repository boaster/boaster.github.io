<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Your awesome title</title>
    <description>Write an awesome description for your new site here. You can edit this line in _config.yml. It will appear in your document head meta (for Google search results) and in your feed.xml site description.
</description>
    <link>http://yourdomain.com/</link>
    <atom:link href="http://yourdomain.com/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Sat, 04 Apr 2015 19:38:48 -0400</pubDate>
    <lastBuildDate>Sat, 04 Apr 2015 19:38:48 -0400</lastBuildDate>
    <generator>Jekyll v2.5.3</generator>
    
      <item>
        <title>Welcome to Jekyll!</title>
        <description>&lt;p&gt;You’ll find this post in your &lt;code&gt;_posts&lt;/code&gt; directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run &lt;code&gt;jekyll serve&lt;/code&gt;, which launches a web server and auto-regenerates your site when a file is updated.&lt;/p&gt;

&lt;p&gt;To add new posts, simply add a file in the &lt;code&gt;_posts&lt;/code&gt; directory that follows the convention &lt;code&gt;YYYY-MM-DD-name-of-post.ext&lt;/code&gt; and includes the necessary front matter. Take a look at the source for this post to get an idea about how it works.&lt;/p&gt;

&lt;p&gt;Jekyll also offers powerful support for code snippets:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Hi, &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Tom&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#=&amp;gt; prints &amp;#39;Hi, Tom&amp;#39; to STDOUT.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Check out the &lt;a href=&quot;http://jekyllrb.com&quot;&gt;Jekyll docs&lt;/a&gt; for more info on how to get the most out of Jekyll. File all bugs/feature requests at &lt;a href=&quot;https://github.com/jekyll/jekyll&quot;&gt;Jekyll’s GitHub repo&lt;/a&gt;. If you have questions, you can ask them on &lt;a href=&quot;https://github.com/jekyll/jekyll-help&quot;&gt;Jekyll’s dedicated Help repository&lt;/a&gt;.&lt;/p&gt;

</description>
        <pubDate>Sat, 04 Apr 2015 13:15:48 -0400</pubDate>
        <link>http://yourdomain.com/jekyll/update/2015/04/04/welcome-to-jekyll.html</link>
        <guid isPermaLink="true">http://yourdomain.com/jekyll/update/2015/04/04/welcome-to-jekyll.html</guid>
        
        
        <category>jekyll</category>
        
        <category>update</category>
        
      </item>
    
      <item>
        <title>Testing</title>
        <description># ctf.infosecinstitute.com: Level 1
**Bounty:** $10
**Description:**

&gt; May the source be with you!

## Write-up

Simple enough, the flag is within a HTML comment tag in the source code.

```bash
$ curl http://ctf.infosecinstitute.com/levelone.php | grep flag
&lt;!-- infosec_flagis_welcome --&gt;
```
## Links
* &lt;http://ctf.infosecinstitute.com/levelone.php&gt;
</description>
        <pubDate>Tue, 31 Mar 2015 00:00:00 -0400</pubDate>
        <link>http://yourdomain.com/2015/03/31/Test.html</link>
        <guid isPermaLink="true">http://yourdomain.com/2015/03/31/Test.html</guid>
        
        
      </item>
    
      <item>
        <title>Level 9/readme</title>
        <description>&lt;h1 id=&quot;ctfinfosecinstitutecom-level-9&quot;&gt;ctf.infosecinstitute.com: Level 9&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;Bounty:&lt;/strong&gt; $90
&lt;strong&gt;Description:&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;CISCO IDS WEB LOGIN SYSTEM&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;write-up&quot;&gt;Write-up&lt;/h2&gt;

&lt;p&gt;Here we are presented with login page. Performing any SQL Injections or trying to trigger PHP Exception errors was not working. I googled CISCO default credentials and stumbled on the following page &lt;a href=&quot;http://portforward.com/default_username_password/CISCO.htm&quot;&gt;http://portforward.com/default_username_password/CISCO.htm&lt;/a&gt;, trying all credentials one by one I found a working one.
Username: root
Password: attack&lt;/p&gt;

&lt;p&gt;After successfully logon we are presented with the following JavaScript alert message “alert(‘ssaptluafed_sigalf_cesofni’)”. Reading it backwards is the flag string.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;bash
$ python -c &quot;print &#39;ssaptluafed_sigalf_cesofni&#39; [::-1]&quot;
infosec_flagis_defaultpass
&lt;/code&gt;
## Links
* &lt;a href=&quot;http://ctf.infosecinstitute.com/levelnine.php&quot;&gt;http://ctf.infosecinstitute.com/levelnine.php&lt;/a&gt;&lt;/p&gt;

</description>
        <pubDate>Mon, 30 Mar 2015 00:00:00 -0400</pubDate>
        <link>http://yourdomain.com/2015/03/30/Level-9/README.html</link>
        <guid isPermaLink="true">http://yourdomain.com/2015/03/30/Level-9/README.html</guid>
        
        
      </item>
    
      <item>
        <title>Level 8/readme</title>
        <description>&lt;h1 id=&quot;ctfinfosecinstitutecom-level-8&quot;&gt;ctf.infosecinstitute.com: Level 8&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;Bounty:&lt;/strong&gt; $80
&lt;strong&gt;Description:&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Do you want to download the &lt;a href=&quot;app.exe&quot;&gt;app.exe&lt;/a&gt; file?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;write-up&quot;&gt;Write-up&lt;/h2&gt;

&lt;p&gt;Simply extracting any printable characters from the binary with “strings” does the trick for this one.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;bash
$ strings app.exe  | grep flagis
infosec_flagis_0x1a
&lt;/code&gt;
## Links
* &lt;a href=&quot;http://ctf.infosecinstitute.com/leveleight.php&quot;&gt;http://ctf.infosecinstitute.com/leveleight.php&lt;/a&gt;&lt;/p&gt;

</description>
        <pubDate>Mon, 30 Mar 2015 00:00:00 -0400</pubDate>
        <link>http://yourdomain.com/2015/03/30/Level-8/README.html</link>
        <guid isPermaLink="true">http://yourdomain.com/2015/03/30/Level-8/README.html</guid>
        
        
      </item>
    
      <item>
        <title>Level 7/readme</title>
        <description>&lt;h1 id=&quot;ctfinfosecinstitutecom-level-7&quot;&gt;ctf.infosecinstitute.com: Level 7&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;Bounty:&lt;/strong&gt; $70
&lt;strong&gt;Description:&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;f00 not found 
Something is not right here???
btw…bounty $70&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;write-up&quot;&gt;Write-up&lt;/h2&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;The link for “Level 7” takes us to 404.php, which returns HTTP Response Code 404 Not Found. However if we follow the URI scheme from the previous levels we know that the page for each level is located at “/level[one&lt;/td&gt;
      &lt;td&gt;two&lt;/td&gt;
      &lt;td&gt;three&lt;/td&gt;
      &lt;td&gt;four&lt;/td&gt;
      &lt;td&gt;five&lt;/td&gt;
      &lt;td&gt;six&lt;/td&gt;
      &lt;td&gt;…].php”. So let’s not follow the link to 404.php but instead let’s request /levelseven.php.&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;code&gt;bash
$ curl -v http://ctf.infosecinstitute.com/levelseven.php
* Hostname was NOT found in DNS cache
*   Trying 52.10.161.229...
* Connected to ctf.infosecinstitute.com (52.10.161.229) port 80 (#0)
&amp;gt; GET /levelseven.php HTTP/1.1
&amp;gt; User-Agent: curl/7.38.0
&amp;gt; Host: ctf.infosecinstitute.com
&amp;gt; Accept: */*
&amp;gt;
* HTTP 1.0, assume close after body
&amp;lt; HTTP/1.0 200 aW5mb3NlY19mbGFnaXNfeW91Zm91bmRpdA==
&amp;lt; Date: Mon, 16 Mar 2015 16:49:03 GMT
&amp;lt; Server: Apache/2.4.7 (Ubuntu)
&amp;lt; X-Powered-By: PHP/5.5.9-1ubuntu4.6
&amp;lt; Content-Length: 0
&amp;lt; Connection: close
&amp;lt; Content-Type: text/html
&amp;lt;
* Closing connection 0
&lt;/code&gt;
Now we see HTTP Response Code 200 OK and in place of the Error code’s message “OK”, we are presented with a base64 encoded string.
Decoding the string gives us the flag.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;bash
$ echo -n &#39;aW5mb3NlY19mbGFnaXNfeW91Zm91bmRpdA==&#39; | base64 -d
infosec_flagis_youfoundit
&lt;/code&gt;
## Links
* &lt;a href=&quot;http://ctf.infosecinstitute.com/404.php&quot;&gt;http://ctf.infosecinstitute.com/404.php&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Mon, 30 Mar 2015 00:00:00 -0400</pubDate>
        <link>http://yourdomain.com/2015/03/30/Level-7/README.html</link>
        <guid isPermaLink="true">http://yourdomain.com/2015/03/30/Level-7/README.html</guid>
        
        
      </item>
    
      <item>
        <title>Level 6/readme</title>
        <description>&lt;h1 id=&quot;ctfinfosecinstitutecom-level-6&quot;&gt;ctf.infosecinstitute.com: Level 6&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;Bounty:&lt;/strong&gt; $60
&lt;strong&gt;Description:&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Do you want to download &lt;a href=&quot;sharkfin.pcap&quot;&gt;sharkfin.pcap&lt;/a&gt; file?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;write-up&quot;&gt;Write-up&lt;/h2&gt;

&lt;p&gt;Looking at the content of the pcap, most of the traffic is HTTP, HTTPS and the rest is noise. However one packet that doesn’t seem right is UDP from 127.0.0.1 to 127.0.0.1.
We know that this is not normal traffic but instead it’s crafted.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;bash
$ tcpdump -nnr sharkfin.pcap -As0 udp and host 127.0.0.1
reading from file sharkfin.pcap, link-type EN10MB (Ethernet)
14:59:54.303760 IP 127.0.0.1.32769 &amp;gt; 127.0.0.1.139: UDP, length 44
E..H..@.@.&amp;lt;..............4..696e666f7365635f666c616769735f736e6966666564
$ 
&lt;/code&gt;
This doesn’t look like NETBIOS traffic at all, right ? Let’s convert from hex to ascii.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;bash
$ python -c &#39;print(&quot;\x69\x6e\x66\x6f\x73\x65\x63\x5f\x66\x6c\x61\x67\x69\x73\x5f\x73\x6e\x69\x66\x66\x65\x64&quot;)&#39;
infosec_flagis_sniffed
&lt;/code&gt;
## Links
* &lt;a href=&quot;http://ctf.infosecinstitute.com/levelsix.php&quot;&gt;http://ctf.infosecinstitute.com/levelsix.php&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Mon, 30 Mar 2015 00:00:00 -0400</pubDate>
        <link>http://yourdomain.com/2015/03/30/Level-6/README.html</link>
        <guid isPermaLink="true">http://yourdomain.com/2015/03/30/Level-6/README.html</guid>
        
        
      </item>
    
      <item>
        <title>Level 5/all</title>
        <description>01101001011011100110011001101111011100110110010101100011010111110110011001101100011000010110011101101001011100110101111101110011011101000110010101100111011000010110110001101001011001010110111001110011
</description>
        <pubDate>Mon, 30 Mar 2015 00:00:00 -0400</pubDate>
        <link>http://yourdomain.com/2015/03/30/Level-5/all.html</link>
        <guid isPermaLink="true">http://yourdomain.com/2015/03/30/Level-5/all.html</guid>
        
        
      </item>
    
      <item>
        <title>Level 5/readme</title>
        <description>&lt;h1 id=&quot;ctfinfosecinstitutecom-level-5&quot;&gt;ctf.infosecinstitute.com: Level 5&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;Bounty:&lt;/strong&gt; $50
&lt;strong&gt;Description:&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;

&lt;/blockquote&gt;

&lt;h2 id=&quot;write-up&quot;&gt;Write-up&lt;/h2&gt;

&lt;p&gt;Upon loading the web page, we get a JavaScript loop with alert event. Instead I used curl to view the site. The source contained a link to an &lt;a href=&quot;aliens.jpg&quot;&gt;image&lt;/a&gt;.
Downloading the &lt;a href=&quot;aliens.jpg&quot;&gt;image&lt;/a&gt; and running Steganography tool steghide I was able to extract text file &lt;a href=&quot;all.txt&quot;&gt;all.txt&lt;/a&gt;. The file contained representation of binary data. Upon converting the binary digits to ascii we get the flag.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;bash
$ steghide extract -sf aliens.jpg
Enter passphrase:
wrote extracted data to &quot;all.txt&quot;.
$ cat all.txt
01101001011011100110011001101111011100110110010101100011010111110110011001101100011000010110011101101001011100110101111101110011011101000110010101100111011000010110110001101001011001010110111001110011
$ python
&amp;gt;&amp;gt;&amp;gt; import binascii
&amp;gt;&amp;gt;&amp;gt; n = int(&#39;01101001011011100110011001101111011100110110010101100011010111110110011001101100011000010110011101101001011100110101111101110011011101000110010101100111011000010110110001101001011001010110111001110011&#39;, 2)
&amp;gt;&amp;gt;&amp;gt; binascii.unhexlify(&#39;%x&#39; % n)
&#39;infosec_flagis_stegaliens&#39;
&amp;gt;&amp;gt;&amp;gt;
&lt;/code&gt;
## Links
* &lt;a href=&quot;http://ctf.infosecinstitute.com/levelfive.php&quot;&gt;http://ctf.infosecinstitute.com/levelfive.php&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Mon, 30 Mar 2015 00:00:00 -0400</pubDate>
        <link>http://yourdomain.com/2015/03/30/Level-5/README.html</link>
        <guid isPermaLink="true">http://yourdomain.com/2015/03/30/Level-5/README.html</guid>
        
        
      </item>
    
      <item>
        <title>Level 4/readme</title>
        <description>&lt;h1 id=&quot;ctfinfosecinstitutecom-level-4&quot;&gt;ctf.infosecinstitute.com: Level 4&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;Bounty:&lt;/strong&gt; $40
&lt;strong&gt;Description:&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;HTTP means Hypertext Transfer Protocol&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;write-up&quot;&gt;Write-up&lt;/h2&gt;

&lt;p&gt;Website sets the following HTTP Cookie:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;bash
$ curl -I http://ctf.infosecinstitute.com/levelfour.php
HTTP/1.1 200 OK
Date: Mon, 16 Mar 2015 04:10:59 GMT
Server: Apache/2.4.7 (Ubuntu)
X-Powered-By: PHP/5.5.9-1ubuntu4.6
Set-Cookie: fusrodah=vasbfrp_syntvf_jrybirpbbxvrf
Content-Type: text/html
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;If we decrypt it using a simple substitution cipher ROT13, we get the flag.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;bash
$ echo &#39;vasbfrp_syntvf_jrybirpbbxvrf&#39; | tr &#39;[abcdefghijklmnopqrstuvwxyz]&#39; &#39;[nopqrstuvwxyzabcdefghijklm]&#39;
infosec_flagis_welovecookies
&lt;/code&gt;
## Links
* &lt;a href=&quot;http://ctf.infosecinstitute.com/levelfour.php&quot;&gt;http://ctf.infosecinstitute.com/levelfour.php&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Mon, 30 Mar 2015 00:00:00 -0400</pubDate>
        <link>http://yourdomain.com/2015/03/30/Level-4/README.html</link>
        <guid isPermaLink="true">http://yourdomain.com/2015/03/30/Level-4/README.html</guid>
        
        
      </item>
    
      <item>
        <title>Level 3/readme</title>
        <description>&lt;h1 id=&quot;ctfinfosecinstitutecom-level-3&quot;&gt;ctf.infosecinstitute.com: Level 3&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;Bounty:&lt;/strong&gt; $30
&lt;strong&gt;Description:&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;[Image] (qrcode.png)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;write-up&quot;&gt;Write-up&lt;/h2&gt;

&lt;p&gt;For this challenge we had to use QRCode Reader. The extracted data from the QR Code was a message in morse code.
For both tasks, I used an application on my phone :).&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
INFOSECFLAGISMORSING
&lt;/code&gt;
## Links
* &lt;a href=&quot;http://ctf.infosecinstitute.com/levelthree.php&quot;&gt;http://ctf.infosecinstitute.com/levelthree.php&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Mon, 30 Mar 2015 00:00:00 -0400</pubDate>
        <link>http://yourdomain.com/2015/03/30/Level-3/README.html</link>
        <guid isPermaLink="true">http://yourdomain.com/2015/03/30/Level-3/README.html</guid>
        
        
      </item>
    
  </channel>
</rss>
